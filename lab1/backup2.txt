import numpy as np
import matplotlib.pyplot as plt

from data import get_data, inspect_data, split_data
from functions import calculate_MSE, calculate_gradient_BDG


data = get_data()
inspect_data(data)

train_data, test_data = split_data(data)

# Simple Linear Regression
# predict MPG (y, dependent variable) using Weight (x, independent variable) using closed-form solution
# y = theta_0 + theta_1 * x - we want to find theta_0 and theta_1 parameters that minimize the prediction error

# We can calculate the error using MSE metric:
# MSE = SUM (from i=1 to n) (actual_output - predicted_output) ** 2

# get the columns
y_train = train_data['MPG'].to_numpy()
x_train = train_data['Weight'].to_numpy()

y_test = test_data['MPG'].to_numpy()
x_test = test_data['Weight'].to_numpy()

# TODO: calculate closed-form solution

# 1.8
x_train_obs_mat = np.concatenate([np.ones((len(x_train), 1)), x_train.reshape(-1, 1)], axis=1)
# 1.13
theta_best = np.linalg.inv(x_train_obs_mat.T @ x_train_obs_mat) @ x_train_obs_mat.T @ y_train

print("Best theta: ", theta_best)

# TODO: calculate error
mse_train = calculate_MSE(theta_best, x_train_obs_mat, y_train)
print("MSE on Training Data for closed-form solution: ", mse_train)

mse_test = calculate_MSE(theta_best, np.concatenate([np.ones((len(x_test), 1)), x_test.reshape(-1, 1)], axis=1), y_test)
print("MSE on Test Data for closed-form solution: ", mse_test)

# plot the regression line
x = np.linspace(min(x_test), max(x_test), 100)
y = float(theta_best[0]) + float(theta_best[1]) * x
plt.plot(x, y)
plt.scatter(x_test, y_test)
plt.xlabel('Weight')
plt.ylabel('MPG')
plt.show()

# TODO: standardization for x_train
x_train_std = (x_train - np.mean(x_train)) / np.std(x_train)
x_train_obs_mat_std = np.concatenate([np.ones((len(x_train_std), 1)), x_train_std.reshape(-1, 1)], axis=1)

y_train_std = (y_train - np.mean(y_train)) / np.std(y_train)
y_train_obs_mat_std = np.concatenate([np.ones((len(y_train_std), 1)), y_train_std.reshape(-1, 1)], axis=1)
#x_test_std = (x_test - np.mean(x_train)) / np.std(x_train)
#x_test_obs_mat_std = np.concatenate([np.ones((len(x_test_std), 1)), x_test_std.reshape(-1, 1)], axis=1)

# TODO: calculate theta using Batch Gradient Descent
theta_gr = np.zeros(2)
learning_rate = 0.1

theta_gr = calculate_gradient_BDG(theta_gr,learning_rate,x_train_obs_mat_std,y_train_std)

theta_gr_copy = np.copy(theta_gr)
#theta_gr_copy[1] = theta_gr[1] / np.std(x_train)
#theta_gr_copy[0] = theta_gr[0] - np.sum(theta_gr[1] * (np.mean(x_train) / np.std(x_train)))
#theta_gr = theta_gr.reshape(-1)

theta_gr_copy[1] = theta_gr_copy[1] * np.std(y_train) / np.std(x_train)
theta_gr_copy[0] = np.mean(y_train) - theta_gr_copy[1] * np.mean(x_train)

print("Gradient theta: ", theta_gr_copy)

# TODO: calculate error
mse_train_gr = calculate_MSE(theta_gr_copy, x_train_obs_mat, y_train)
print("MSE on Training Data for Batch Gradient Descent: ", mse_train_gr)

mse_test_gr = calculate_MSE(theta_gr_copy, np.concatenate([np.ones((len(x_test), 1)), x_test.reshape(-1, 1)], axis=1), y_test)
print("MSE on Test Data for Batch Gradient Descent: ", mse_test_gr)

# plot the regression line
x = np.linspace(min(x_test), max(x_test), 100)
y = float(theta_gr_copy[0]) + float(theta_gr_copy[1]) * x
plt.plot(x, y)
plt.scatter(x_test, y_test)
plt.xlabel('Weight')
plt.ylabel('MPG')
plt.show()
